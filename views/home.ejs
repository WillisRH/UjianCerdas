<h1 class="text-center text-white mt-5">UjianCerdas</h1>
<div id="start-message" class="text-white text-center d-block mb-5">
  <h3 id="start-message-mini" class="text-white text-center d-block">To start this exam, click "Start Exam." If it doesn't pop up, please reload the page!</h3>
</div>

<!-- Start Exam Confirmation Popup -->
<div class="modal fade" id="start-exam-modal" tabindex="-1" role="dialog" data-backdrop="static">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Mulai Ujian</h5>
      </div>
      <div class="modal-body">
        <p>Apakah kamu sudah siap untuk memulai mengerjakan : <%= locals.kodesoal %></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" id="start-exam-button">Mulai Ujian</button>
      </div>
    </div>
  </div>
</div>

<div id="exam-content" class="text-center">
  <!-- User credentials and exam code -->
  <h5 class="text-white">Nama : <%= username %></h5>
  <h5 class="text-white">Kode Soal : <%= kodesoal %></h5>

  <!-- Timer -->
  <h5 class="text-white" id="timer">00:00:00</h5>

  <!-- Exam questions and content go here -->
  <form id="exam-form" class="container-fluid rounded-lg bg-light p-5 text-left shadow-lg" style="max-width: 500px;">
    <% for (let i = 0; i < exam.length; i++) { %>
    <div class="mb-5">
      <h5 class="uncopyable-text">Pertanyaan <%= i + 1 %> <h6>(<%= exam[i].questionid %>)</h6> <%= exam[i].question %></h5>
      <div id="answers" class="d-block text-left">
        <% for (let j = 0; j < exam[i].choices.length; j++) { %>
        <label class="d-block">
          <input type="radio" name="answer<%= i + 1 %>" value="<%= exam[i].choices[j] %>">
          <%= exam[i].choices[j] %>
        </label>
        <% } %>
      </div>
    </div>
    <% } %>

    <!-- Add more questions as needed -->

    <button type="button" id="submit-button" class="btn btn-success" disabled>Selesai mengerjakan</button>
  </form>
</div>


<!-- Bootstrap modal for confirmation popup -->
<div class="modal fade" id="confirmation-modal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Konfirmasi</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        Apakah kamu yakin ingin selesai? cek kembali jika ragu ragu.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirm-submit">Submit</button>
      </div>
    </div>
  </div>
</div>

<!-- Bootstrap modal for cheating detection -->
<div class="modal fade" id="cheating-modal" tabindex="-1" role="dialog" data-backdrop="static">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Kecurangan terdeteksi!</h5>
      </div>
      <div class="modal-body">
        Kamu telah mencoba curang sebanyak <span id="cheating-count"></span>/5 kali.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-dismiss="modal">OK</button>
      </div>
    </div>
  </div>
</div>

<!-- JavaScript for tracking user actions and additional actions -->
<script>
  var username = '<%= username %>';
  var id = '<%= id %>';
  var kodesoal = '<%= kodesoal %>';
  let start = false;
  let finished = false;
  let cheatingAttempts = 0;
  // if (cheatingAttempts < 5) {
  //     cheatingAttempts++;
  // }

  function SessionAdd(username, id, kodesoal) {
    $.ajax({
      type: 'POST',
      url: '/session',
      contentType: 'application/json',
      data: JSON.stringify({
        username,
        id,
        kodesoal,
      }),
      success: function() {},
      error: function(error) {
        console.error('Error:', error);
      }
    });
  }
  console.log(username)

  // Function to log user actions (you can implement logging as needed)
  function logAction(action, details) {
    $.ajax({
      type: 'POST',
      url: '/log',
      contentType: 'application/json',
      data: JSON.stringify({
        action,
        details,
        username,
        attempts: cheatingAttempts
      }),
      success: function() {},
      error: function(error) {
        console.error('Error:', error);
      }
    });
  }

  // Function to handle confirmation
  function handleConfirmation() {
    $('#confirmation-modal').modal('show');
  }

  // Show the start exam modal when the page loads
  $(document).ready(function() {
    $('#start-exam-modal').modal('show');
    // $(document).on('visibilitychange', function() {
    //     if (document.visibilityState === 'hidden') {
    //         if(start) {
    //         // Page is not visible (e.g., tab is not in focus)
    //         logAction('Page Hidden');
    //         detectCheating(); // Call the cheating detection function
    //         }
    //     }
    // });



    //   SessionAdd(username, id, kodesoal)

    $(window).on('blur', function() {
      if (start && !$('#cheating-modal').is(':visible')) {
        cheatingAttempts++;
        logAction('Page Blurred');
        // detectCheating(); // Call the cheating detection function

        $('#cheating-count').text(cheatingAttempts);
        $('#cheating-modal').modal('show');
        if (cheatingAttempts >= 5) {
          $('#submit-button').prop('disabled', true);
        }
      }
    });

    if (!start) {
      $('#exam-content').css('display', 'none'); // Initially hide exam content
      $('#start-message').css('display', 'block'); // Show the start message
    }
    if (cheatingAttempts >= 5) {
      $('#cheating-modal').modal('show');
      $('#submit-button').prop('disabled', true);
    }
  });

  // Function to handle confirmation
  function submitForm() {
    $('#confirmation-modal').modal('show');
  }

  $(document).on('click', '#confirm-submit', function() {
    // You can perform the form submission logic here
    // Redirect to the desired URL (e.g., "/done")
    window.location.href = '/done';
  });

  // Add event listener to start the exam when the "Start Exam" button is clicked

  $('#start-exam-button').on('click', function() {
    playing = true
    start = true;
    $('#start-exam-modal').modal('hide'); // Hide the modal
    $('#exam-content').css('display', 'block'); // Show the exam content
    $('#start-message-mini').replaceWith("Semangat mengerjakan dan jangan coba-coba untuk menyontek!")
    $('#submit-button').prop('disabled', false); // Enable the submit button
  });

  // Add event listener to show the confirmation modal when the submit button is clicked
  $('#submit-button').on('click', function() {
    submitForm();
  });

  // Cheating detection logic
  $(document).on('copy', function(event) {
    if (start) {
      event.preventDefault(); // Prevent the default copy behavior

      // Set your custom text as the copied content
      const customText = "Gabisa nyontek ya.";
      const clipboardData = event.originalEvent.clipboardData || window.clipboardData;
      clipboardData.setData('text', customText);

      cheatingAttempts++;
      $('#cheating-count').text(cheatingAttempts);
      $('#cheating-modal').modal('show');
      logAction('Copying Text');
      // detectCheating();
    }
  });


  // $(document).on('keydown', function(event) {
  //     if (start && (event.ctrlKey || event.metaKey) && event.key === 'c') {
  //         logAction('Keyboard Shortcut: Copy');
  //         detectCheating();
  //     }
  // });

  // Function to detect cheating
  function detectCheating() {
    if (start) {
      cheatingAttempts++;
      $('#cheating-count').text(cheatingAttempts);
      if (cheatingAttempts >= 5) {
        $('#cheating-modal').modal('show');
        $('#submit-button').prop('disabled', true);
      }
    }
  }

  const screenWidth = window.screen.width;
  const screenHeight = window.screen.height;
  const displayScale = window.devicePixelRatio;
  logAction('Screen Info', {
    screenWidth,
    screenHeight,
    displayScale,
  });

  let previousWidth = $(window).width();
  let previousHeight = $(window).height();
  let resizeCounted = false; // Flag to track whether a resize event has been counted

  $(window).on('resize', function() {
    const currentWidth = $(window).width();
    const currentHeight = $(window).height();


    if (start && !resizeCounted) {
      // cheatingAttempts++;
      // $('#cheating-count').text(cheatingAttempts);

      if (currentWidth !== previousWidth || currentHeight !== previousHeight) {
        logAction('Size Change', {
          previousWidth,
          currentWidth,
          previousHeight,
          currentHeight,

        });
        return window.location.href = '/cheat';



        resizeCounted = true; // Set the flag to true to prevent further counting during this resize event
      }
    } else {
      // Reset the flag if the user resizes the window again
      resizeCounted = false;
    }

    // Update previous width and height
    previousWidth = currentWidth;
    previousHeight = currentHeight;
  });

  // Add event listener to handle the "OK" button click in the cheating detection modal
  jQuery(document).on('click', '#cheating-modal .btn-primary', function() {

    if (cheatingAttempts >= 5) {
      // Redirect to /logout?lock
      window.location.href = '/logout?lock';
    } else {
      // Close the modal
      $('#cheating-modal').modal('hide');
    }

    // didnt work fak this
    // if (cheatingAttempts == 4) {
    //     $('#cheating-modal .btn-primary').removeClass('btn-primary').addClass('btn-danger').text('Logout & Lock');
    //     return
    // }
  });
  // }

  // Timer function
  var COUNT_START = 10 * 60 * 60; // tenths * seconds * hours
  var count = COUNT_START;
  var playing = false


  function countdown() {
    displayTime();
    if (count == 0) {
      playing = false;
    } else if (playing) {
      setTimeout(countdown, 100);
      count--;
    } else {
      setTimeout(countdown, 100);
    }
  }
  countdown();

  function displayTime() {

    var tenths = count;
    var sec = Math.floor(tenths / 10);
    var hours = Math.floor(sec / 3600);
    sec -= hours * (3600);
    var mins = Math.floor(sec / 60);
    sec -= mins * (60);

    if (hours < 1) {
      document.getElementById('timer').innerHTML = LeadingZero(mins) + ':' + LeadingZero(sec);
    } else {
      document.getElementById('timer').innerHTML = hours + ':' + LeadingZero(mins) + ':' + LeadingZero(sec);
    }
  }

  function LeadingZero(Time) {
    return (Time < 10) ? "0" + Time : +Time;
  }
</script>